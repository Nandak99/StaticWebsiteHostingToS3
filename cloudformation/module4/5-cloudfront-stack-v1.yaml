AWSTemplateFormatVersion: 2010-09-09

## =================== DESCRIPTION =================== ##
Description: >-
  AWS CloudFormation sample template
  - Create CloudFront distribution and point it to S3 bucket for root domain (that hosts static website) from which CloudFront gets the files to distribute

## ===================== METADATA ===================== ##
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      # - Label:
      #     default: Distribution Origins parameters
      #   Parameters:
      #     - paramS3WebsiteURLForRootDomain
      - Label:
          default: Viewer Certificate parameters
        Parameters:
          - paramACMCertificateArn
      - Label:
          default: DNS parameters
        Parameters:
          - paramRootDomain
          - paramSubdomain
      - Label:
          default: AWS tag parameters
        Parameters:
          - paramUniqueTagName

## =================== PARAMETERS =================== ##
Parameters:
  # paramS3WebsiteURLForRootDomain:
  #   Description: S3 website endpoint for root domain (it hosts static content) without 'http://' (such as example.s3-website-us-east-1.amazonaws.com)
  #   Type: String
  paramACMCertificateArn:
    Description: Public SSL/TLS certificate ARN published by AWS Certificate Manager (ACM)
    Type: String
  paramRootDomain:
    Description: Specify a root domain for your website (such as example.com)
    Type: String
  paramSubdomain:
    Description: OPTIONAL. Specify a subdomain (such as 'www' or 'apex' for www.example.com or apex.example.com). You can leave it empty to skip.
    Type: String
    Default: www
  paramUniqueTagName:
    Description: Specify a unique name for tag
    Type: String
    Default: static-website-hosting-to-s3
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Must contain only ASCII characters

## =================== RESOURCES =================== ##
Resources:
# create a new origin access identity (OAI)
# OAI is a special CloudFront user that you can associate with Amazon S3 origins, so that you can secure S3 content
  myCloudFrontOAI:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        # a comment to describe the origin access identity
        Comment: !Sub 'OAI for ${paramRootDomain} S3 bucket' # S3 bucket name that hosts static website (which is the same as domain name, such as example.com)

  # create a distribution that tells CloudFront where you want content to be delivered from, and the details about how to track and manage content delivery
  myCloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: CloudFront distribution points to S3 bucket for root domain
        Origins: # info about origins for this distribution
          - DomainName: !Sub '${paramRootDomain}.s3.${AWS::Region}.amazonaws.com' # !Ref paramS3WebsiteURLForRootDomain. Note: using S3 website endpoint gives the following error: 'The parameter Origin DomainName does not refer to a valid S3'
            Id: !Sub 'S3Origin-${AWS::StackName}' # unique identifier of an origin access control for this origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${myCloudFrontOAI}'
        Aliases: # info about CNAMEs (alternate domain names), if any, for this distribution
          - !Ref paramRootDomain
          - !Sub '${paramSubdomain}.${paramRootDomain}'
        # let CloudFront replace HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer
        CustomErrorResponses:
          - ErrorCode: 403 # 403 from S3 indicates that the file does not exists
            ResponseCode: 404 # HTTP status code that you want CloudFront to return to the viewer along with the custom error pag
            ResponsePagePath: '/error.html' # path to the custom error page that you want CloudFront to return to a viewer when your origin returns the HTTP status code specified by ErrorCode, for example, /4xx-errors/403-forbidden.html
            ErrorCachingMinTTL: 60 # minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in ErrorCode
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 3600 # in seconds, 1 hour
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          MaxTTL: 86400 # in seconds, 24 hours
          MinTTL: 60 # in seconds, 1 min
          TargetOriginId: !Sub 'S3Origin-${AWS::StackName}'
          ViewerProtocolPolicy: 'redirect-to-https' # 'allow-all'
        DefaultRootObject: '/index.html' 
        Enabled: true # enable distribution
        HttpVersion: http2 # the maximum HTTP version(s) that you want viewers to use to communicate with CloudFront
        PriceClass: PriceClass_All # allowed values: PriceClass_100 | PriceClass_200 | PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref paramACMCertificateArn
          SslSupportMethod: sni-only
      Tags:
        - Key: mastering-cloudformation
          Value: !Ref paramUniqueTagName

## =================== OUTPUT =================== ##
Outputs:  
  myCloudFrontDistributionId:
    Description: CloudFront distribution ID
    Value: !Ref myCloudFrontDistribution
  myCloudFrontDistributionDomain:
    Description: CloudFront distribution domain name
    Value: !GetAtt myCloudFrontDistribution.DomainName